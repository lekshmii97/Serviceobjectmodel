<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="4" hostname="DESKTOP-CN5728E" failures="0" tests="14" name="Test" time="12.482" errors="0" timestamp="2023-06-27T17:41:04 IST">
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@BeforeTest beforeTest" time="10.448">
    <failure type="org.openqa.selenium.WebDriverException" message="unknown error: net::ERR_INTERNET_DISCONNECTED
  (Session info: chrome=113.0.5672.93)
Build info: version: &amp;apos;4.9.0&amp;apos;, revision: &amp;apos;d7057100a6&amp;apos;
System info: os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.7&amp;apos;
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [c1465e06b63b9d6d95fb6cd8fda9e4bf, get {url=https://qalegend.com/mobile_service/panel/login}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 113.0.5672.93, chrome: {chromedriverVersion: 113.0.5672.63 (0e1a4471d5ae..., userDataDir: C:\Users\Zartech\AppData\Lo...}, goog:chromeOptions: {debuggerAddress: localhost:50196}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:50196/devtoo..., se:cdpVersion: 113.0.5672.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: c1465e06b63b9d6d95fb6cd8fda9e4bf">
      <![CDATA[org.openqa.selenium.WebDriverException: unknown error: net::ERR_INTERNET_DISCONNECTED
  (Session info: chrome=113.0.5672.93)
Build info: version: '4.9.0', revision: 'd7057100a6'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [c1465e06b63b9d6d95fb6cd8fda9e4bf, get {url=https://qalegend.com/mobile_service/panel/login}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 113.0.5672.93, chrome: {chromedriverVersion: 113.0.5672.63 (0e1a4471d5ae..., userDataDir: C:\Users\Zartech\AppData\Lo...}, goog:chromeOptions: {debuggerAddress: localhost:50196}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: WINDOWS, proxy: Proxy(), se:cdp: ws://localhost:50196/devtoo..., se:cdpVersion: 113.0.5672.93, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: c1465e06b63b9d6d95fb6cd8fda9e4bf
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:53)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:193)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:183)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:158)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)
at org.openqa.selenium.remote.RemoteWebDriver.get(RemoteWebDriver.java:297)
at com.Serviceobjectmodel.Base.TestBaseService.beforeTest(TestBaseService.java:93)
... Removed 29 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeTest beforeTest -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterMethod takeScreenShotOnFailure" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod takeScreenShotOnFailure -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterTest afterTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterTest afterTest -->
  <testcase classname="com.Serviceobjectmodel.Scripts.ServiceLoginTest" name="verifySigninInvalidUserInvalidpass" time="0.0">
    <skipped/>
  </testcase> <!-- verifySigninInvalidUserInvalidpass -->
  <testcase classname="com.Serviceobjectmodel.Scripts.ServiceLoginTest" name="verifySigninInvalidUserValidpass" time="0.0">
    <skipped/>
  </testcase> <!-- verifySigninInvalidUserValidpass -->
  <testcase classname="com.Serviceobjectmodel.Scripts.ServiceLoginTest" name="verifySigninValidUserInvalidpass" time="0.0">
    <skipped/>
  </testcase> <!-- verifySigninValidUserInvalidpass -->
  <testcase classname="com.Serviceobjectmodel.Scripts.ServiceLoginTest" name="verifySigninValidUserValidpass" time="0.0">
    <skipped/>
  </testcase> <!-- verifySigninValidUserValidpass -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingNewResultFilter" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingNewResultFilter -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingReparation" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingReparation -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingsearch" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingsearch -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingColumn" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingColumn -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingnewColumn" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingnewColumn -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingColumnView" time="0.001">
    <skipped/>
  </testcase> <!-- verifyingColumnView -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingshowdroping" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingshowdroping -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingadd" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingadd -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingname" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingname -->
  <testcase classname="com.Serviceobjectmodel.Scripts.HomeTest" name="verifyingnameclient" time="0.0">
    <skipped/>
  </testcase> <!-- verifyingnameclient -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@BeforeTest beforeTest" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest beforeTest -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterTest afterTest" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest afterTest -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@BeforeTest beforeTest" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest beforeTest -->
  <testcase classname="com.Serviceobjectmodel.Base.TestBaseService" name="@AfterTest afterTest" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest afterTest -->
</testsuite> <!-- Test -->
